// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const dishesAndChefs = new Map([
  ['Пицца "Маргарита"', 'Виктор'],
  ['Пицца "Пепперони"', 'Виктор'],
  ['Суши "Филадельфия"', 'Ольга'],
  ['Суши "Калифорния"', 'Ольга'],
  ['Тирамису', 'Дмитрий'],
  ['Чизкейк', 'Дмитрий']
]);

const orders = new Map();

function newOrder(client, dish) {
  if (orders.has(client)) {
      orders.get(client).push(dish);
  } else {
      orders.set(client, [dish]);
  }
}

newOrder({ name: 'Алексей' }, 'Пицца "Пепперони"');
newOrder({ name: 'Алексей' }, 'Тирамису');

newOrder({ name: 'Мария' }, 'Суши "Калифорния"');
newOrder({ name: 'Мария' }, 'Пицца "Маргарита"');

newOrder({ name: 'Ирина' }, 'Чизкейк');

orders.forEach((dishes, client) => {
  console.log(`${client.name} заказал(а):`);
  for (let i = 0; i < dishes.length; i++) {
    console.log(`- ${dishes[i]}`);
    console.log(`  (повар: ${dishesAndChefs.get(dishes[i])})`);
  }
  console.log('');
});